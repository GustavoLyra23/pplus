plugins {
    id 'org.jetbrains.kotlin.jvm' version '2.1.20'
    id 'antlr'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'edu.sc.seis.launch4j' version '2.5.0'
}

group = 'org.gustavolyra'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    antlr 'org.antlr:antlr4:4.13.1'
    implementation 'org.antlr:antlr4-runtime:4.13.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3'
}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ['-visitor', '-package', 'org.gustavolyra.portugolpp']
    outputDirectory = file("${layout.buildDirectory.get()}/generated-src/antlr/main")
}

sourceSets {
    main {
        java {
            srcDir "${layout.buildDirectory.get()}/generated-src/antlr/main"
        }
    }
}

compileKotlin {
    dependsOn generateGrammarSource
}

clean {
    delete "${layout.buildDirectory.get()}/generated-src"
}

test {
    useJUnitPlatform()
}

kotlin {
    jvmToolchain(21)
}

shadowJar {
    archiveBaseName.set('portugolpp')
    archiveClassifier.set('')
    archiveVersion.set('')
    manifest {
        attributes 'Main-Class': 'MainKt'
    }
    from("${layout.buildDirectory.get()}/resources/main/native") {
        into("native")
    }
}

launch4j {
    jarTask = tasks.shadowJar
    copyConfigurable = []
    mainClassName = 'MainKt'
    outfile = 'portugolpp.exe'
    headerType = 'console'
    jreMinVersion = '21'
}

tasks.named('launch4j') {
    dependsOn shadowJar
}

def nativeBuildDir = file("${layout.buildDirectory.get()}/native")

tasks.register("buildNative") {
    doLast {
        nativeBuildDir.mkdirs()
        exec {
            workingDir nativeBuildDir
            commandLine "cmake", "${projectDir}", "-DCMAKE_BUILD_TYPE=Release"
        }

        exec {
            workingDir nativeBuildDir
            if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
                commandLine "cmake", "--build", ".", "--config", "Release"
            } else {
                commandLine "cmake", "--build", "."
            }
        }
    }
}

tasks.register("copyNativeLib", Copy) {
    dependsOn "buildNative"
    from {
        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            fileTree(dir: nativeBuildDir, include: ["**/Release/portugolpp.dll", "**/portugolpp.dll"])
        } else {
            fileTree(dir: nativeBuildDir, include: ["**/libportugolpp.so"])
        }
    }
    into("${layout.buildDirectory.get()}/resources/main/native")
}

tasks.named("processResources") {
    dependsOn("copyNativeLib")
}